#!/usr/bin/env sh
#
# Summary: A transparently wrapper of junest with custom ignoring bins
# Usage: shsh junest [-h|--help] <sub_command>
#        shsh junest enter [argunments for junest...]
#        shsh junest link <executable_name>
#        shsh junest unlink <executable_name>
#        shsh junest linkable [package] [-d|--details]
#        shsh junest linked [-d|--details]
#        shsh junest packages [-d|--details]
#        shsh junest lookup <executable_name>
#
# This can automatically bootstrap junest, which brings a lot of
# packages from the arch linux community AUR via yay.
# After bootstrapping, you can directly install packages via yay.


set -e

export JUNEST_HOME="${SHSH_ROOT:?Root directory for shsh has not been defined.}/cellar/arch_junest_root/junest"
junest_bin_root="$JUNEST_HOME/usr/bin_wrappers"

shsh_junest_pkg_name=_bootstrap/junest
real_junest_bin="$SHSH_ROOT/cellar/packages/$shsh_junest_pkg_name/bin/junest"

if [ "$(basename "$0")" = junest ]; then
  # wrapper mode
  exec "$real_junest_bin" "$@"
  exit
fi

# shellcheck source=libexec/shsh-_utils
. "${UTILS_FUNC:?}"

# TAG completions
if [ "$1" = "--complete" ]; then
  printf '%s\n' link unlink linked linkable lookup packages enter
  exit
fi

##########################################################
# bootstrap

if [ ! -e "$SHSH_INSTALL_BIN/junest" ] && [ -e "$SHSH_ROOT/libexec/shsh-junest" ]; then
  ln -s "$SHSH_ROOT/libexec/shsh-junest" "$SHSH_INSTALL_BIN/junest"
fi
if ! command_exists junest_real || [ ! -d "$JUNEST_HOME" ]; then
    prompt "> Junest not found. Install now?" || exit

    shsh install fsquillace/junest "$shsh_junest_pkg_name" -v BINS=bin/junest@junest_real -f

    junest_real setup

    if [ ! -d "$JUNEST_HOME" ]; then
        error_echo "> something went wrong."
        exit 1
    fi
    mkdir -p "$SHSH_JUNEST_BIN"
    shsh junest link yay
fi

##########################################################

is_exectuable_file () {
  [ -f "$1" ] && [ -x "$1" ]
}

list_all_packages_and_executables () {
  "$real_junest_bin" -- pacman -Ql | grep ' /usr/bin/' | while read -r package file; do
    if is_exectuable_file "$JUNEST_HOME/$file"; then
      printf '%s\t%s\n' "${file##*/}" "pkg: $package"
    fi
  done
}

list_all_packages () {
  "$real_junest_bin" -- pacman -Q | while read -r package version; do
    if [ -n "$OPT_DETAILS" ]; then
        printf '%s\t%s\n' "$package" "$version"
    else
        echo "$package"
    fi
  done
}

get_package_executables () {
  "$real_junest_bin" -- pacman -Qql "$1" | while read -r file; do
    is_exectuable_file "$file" && echo "$file"
  done
}

get_package_name_from_file () {
  "$real_junest_bin" -- pacman -Qo "$1"
}

show_help_and_exit () {
    shsh-help junest
    exit 1
}

# super case
case "$1" in
  enter)
    shift
    exec "$real_junest_bin" "$@"
    exit
    ;;
esac

# process flag

# shellcheck disable=SC2116,SC2028
EOL=$(echo '\00\07\01\00')
if [ "$#" != 0 ]; then
  set -- "$@" "$EOL"
  while [ "$1" != "$EOL" ]; do
    opt="$1"
    case "$opt" in
      -h|--help)
        shsh-help junest
        exit
        ;;
      -d|--details)
        OPT_DETAILS=true
        ;;
      -*)
        echo "Error: Unsupported flag '$opt'" >&2
        exit 1
        ;;
      *) #positional
        set -- "$@" "$1"
    esac
    shift
  done
  shift # remove EOL
fi

# process positional args
if [ "$#" != 0 ]; then
  set -- "$@" "$EOL"
  while [ "$1" != "$EOL" ]; do
    opt="$1"; shift
    case "$opt" in
      linkable)
        if [ "$#" = 2 ]; then
            pkg="$1"; shift
            if [ -n "$OPT_DETAILS" ]; then
                # we want line splitting
                # shellcheck disable=SC2046
                printf '%s\tpkg: '"$pkg"'\n' $(get_package_executables "$pkg" | sed -n -e 's:^/usr/bin/\(.*\+\).*$:\1:p')
            else
                get_package_executables "$pkg" | sed -n -e 's:^/usr/bin/\(.*\+\).*$:\1:p'
            fi
        elif [ "$#" = 1 ]; then
            if [ -n "$OPT_DETAILS" ]; then
                list_all_packages_and_executables
            else
                for file in "$junest_bin_root"/*; do
                  is_file_or_link "$file" && echo "${file##*/}"
                done
            fi
        else
            show_help_and_exit
        fi
        exit
      ;;
      linked)
        [ "$#" = 1 ] || show_help_and_exit
        linked_bins="$(command ls "$SHSH_JUNEST_BIN")"

        if [ -n "$OPT_DETAILS" ]; then
            # FIXME The following might be very slow, it's O(mn) complexity
            all_pkgs="$(list_all_packages_and_executables)"
            # print the rest that are not yet printed
            for bin in $linked_bins; do
                pkg_info="$(echo "$all_pkgs" | awk '/^'"$bin"'\t/')"
                if [ -n "$pkg_info" ]; then
                    echo "$pkg_info"
                else
                    printf '%s\t%s\n' "$bin" "unknown link"
                fi
            done
        else
            echo "$linked_bins"
        fi
        exit
      ;;
      link)
        [ "$#" = 2 ] || show_help_and_exit
        link_name="$1"; shift
        link_name="${link_name##*/}"

        src_link="$junest_bin_root/$link_name"
        if ! is_file_or_link "$src_link"; then
            error_echo "> executable '$link_name' does not exists"
            exit 1
        fi

        target_link="$SHSH_JUNEST_BIN/$link_name"

        export shsh_add_link_show_error=true
        if ! add_link "$src_link" "$target_link"; then
            error_echo "> link $target_link already exists"
            exit 1
        fi
        exit
      ;;
      unlink)
        [ "$#" = 2 ] || show_help_and_exit
        link_name="$1"; shift
        link_name="$SHSH_JUNEST_BIN/${link_name##*/}"

        if ! is_file_or_link "$link_name"; then
            error_echo "> '$link_name' does not exists"
            exit 1
        fi
        remove_linked_without_resolve_link "$SHSH_JUNEST_BIN" "$link_name"
        exit
      ;;
      packages)
        [ "$#" = 1 ] || show_help_and_exit
        list_all_packages
        exit
      ;;
      lookup)
        [ "$#" = 2 ] || show_help_and_exit
        fname="$1"; shift
        get_package_name_from_file "$fname"
        exit
      ;;
      *)
        shsh-help junest
        exit 1
    esac
  done
  shift # remove the EOL token
fi

# no command
shsh-help junest

