#!/usr/bin/env sh

resolve_link() {
  if type greadlink >/dev/null 2>&1; then
    greadlink -f "$1"
  else
    if ! readlink -f "$1" 2>/dev/null; then
      # use self-implemented `readlink -f`
      readlink_canonicalise "$1"
    fi
  fi
}

readlink_canonicalise() (  # we are using subshell to prevent messing up cd
  # This is poor man's GNU `readlink -f`
  # useful for mac without GNU readlink
  # based on https://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
  _target="$(basename "$1")"
  cd "$(dirname "$1")" || exit 1
  i=0
  # Iterate down a (possible) chain of symlinks
  while [ -L "$_target" ]; do
      _target="$(readlink "$_target")"
      cd "$(dirname "$_target")" || exit 1
      _target="$(basename "$_target")"
      i=$((i+1))
      if [ "$i" -gt 1000 ]; then  # check for symlink loop
        echo "Probably encountered symlink loops while resolving path" 1>&2 && exit 1
      fi
  done
  echo "$(pwd -P)"/"$_target"
)

# the sign := will do substitute if parameter is null (i.e. empty)
# but we'll use = instead, as we want to respect null string.
_xdg_data_home="${XDG_DATA_HOME:-$HOME/.local/share}"
export SHSH_ROOT="${SHSH_ROOT:="$_xdg_data_home/shsh"}"

export SHSH_PREFIX="${SHSH_PREFIX:=$SHSH_ROOT/cellar}"
export SHSH_PACKAGES_PATH="${SHSH_PACKAGES_PATH:=$SHSH_PREFIX/packages}"
export SHSH_INSTALL_BIN="${SHSH_INSTALL_BIN:=$SHSH_PREFIX/bin}"
export SHSH_INSTALL_MAN="${SHSH_INSTALL_MAN:=$SHSH_PREFIX/man}"
_xdg_config_home="${XDG_CONFIG_HOME:=$HOME/.config}"
export SHSHRC="${SHSHRC:=$_xdg_config_home/shshrc}"

bin_path="$(dirname "$(resolve_link "$0")")"
export PATH="${bin_path}:${PATH}"
export UTILS_FUNC="$bin_path/shsh-_utils"

export SHSH_JUNEST_ROOT="$SHSH_PREFIX/arch_junest_root"
export SHSH_JUNEST_BIN="$SHSH_JUNEST_ROOT/junest_bin"
