#!/usr/bin/env sh
#
# Summary: Displays a list of outdated packages
# Usage: shsh outdated [-q|--quiet]

set -e
# shellcheck source=libexec/shsh-_utils
. "${UTILS_FUNC:?}"

case "$1" in
  -q|--quiet)
    quiet="true"
    ;;
esac

check_up_to_date() {
  # check updates with git, where directory is $1
  dir="$SHSH_PACKAGES_PATH/$1"
  # only perfrom it if it's actually a git package
  ret=0
  if [ ! -L "$dir" ] && [ -e "$dir/".git ]; then
    git_check_up_to_date "$dir" > /dev/null 2>&1 || ret=$?
    return $ret
  elif [ -e "$dir/.gh-release_info" ]; then
    gh_release_check_up_to_date "$1" "$dir" > /dev/null 2>&1 || ret=$?
    return $ret
  fi
  # indicate this is a plain package
  return 2
}

check_up_to_date_verbose() {
  ret=0
  check_up_to_date "$1" || ret=$?
  if [ "$ret" -eq 0 ]; then
    echo "✓ Up-to-date  $1"
  elif [ "$ret" -eq 1 ]; then
    echo "↯ Outdated    $1"
  elif [ "$ret" -eq 2 ]; then
    echo "⌘ Unknown     $1"
  fi
}



if [ -z "$SHSH_NOMULTITHREAD" ] && command_exists mktemp && command_exists flock; then
  # perform checks with multithreads
  lockfile="$(mktemp)"
  msgfile="$(mktemp)"
  # max timeout 20 sec
  flock -V 2>&1 | grep -iq "BusyBox" || flock_use_timeout="true"

  turn_off_line_wrapping
  # echo $lockfile
  if [ -z "$quiet" ]; then  # verbose
    for package in $(shsh list); do
      echo "Checking      $package..." >> "$msgfile"
    done
    line_nums=$(wc -l < "$msgfile")
    cat "$msgfile"
  fi
  # shellcheck disable=SC2094  # flock does not write to the lockfile
  for package in $(shsh list); do
    (
      if [ -z "$quiet" ]; then  # verbose
        msg=$(check_up_to_date_verbose "$package")
        flock ${flock_use_timeout:+"-w" 20} 5 || :
        update_line "$package" "$msg" "$msgfile"
        clear_prev_lines "$line_nums"
        cat "$msgfile"
      else
        ret=0
        check_up_to_date "$package" || ret=$?
        if [ "$ret" -eq 1 ]; then
          # try to obtains lock to output to stdout
          flock ${flock_use_timeout:+"-w" 20} 5 || :
          echo "$package"
        fi
      fi
    ) 5>>"$lockfile" &
  done
  wait
  restore_line_wrapping
  # cleanup
  rm -f "$lockfile"
  rm -f "$msgfile"
else
  # doesn't contain the necessary utilities, we will perform in sequential order
  for package in $(shsh list); do
    if [ -z "$quiet" ]; then  # verbose
      check_up_to_date_verbose "$package"
    else
      ret=0
      check_up_to_date "$package" || ret=$?
      if [ "$ret" -eq 1 ]; then
        echo "$package"
      fi
    fi
  done
fi
