#!/usr/bin/env sh
# Summary: Upgrades a package
#
# Usage: shsh upgrade <package> [-f|--force]
#   or:  shsh upgrade <-a|--all>
#
# Options:
#       -a, --all    upgrade all packages, instead of invidivual package
#       -f, --force  force upgrade a package even if the cloned repository is
#                    up-to-date
#       --nohooks    supress the evaluation of existing hooks in SHSHRC file
#                    (default is executing all previously saved hooks)


set -e
# shellcheck source=libexec/shsh-_utils
. "${UTILS_FUNC:?}"

for arg; do
  shift
  case "$arg" in
    -a|--all)
      upgrade_all="true"
    ;;
    -f|--force)
      force_upgrade="true"
    ;;
    --nohooks)
      nohooks="true"
    ;;
    *)
      # set back any unused args
      set -- "$@" "$arg"
  esac
done

if [ -n "$upgrade_all" ]; then
  lockfile="$(mktemp)"
  msgfile="$(mktemp)"

  update_and_refresh_screen() {
    flock -w 20 5 || :
    update_line "$1" "$2" "$msgfile"
    clear_prev_lines "$line_nums"
    cat "$msgfile"
    flock -u 5 || :
  }

  turn_off_line_wrapping

  for package in $(shsh list); do
    info_echo "⟳ Checking status of $package..." >> "$msgfile"
  done
  line_nums=$(wc -l < "$msgfile")
  cat "$msgfile"
  for package in $(shsh list); do
    (
      if [ ! -e "$SHSH_PACKAGES_PATH/$package/".git ]; then
        update_and_refresh_screen "$package" "⌘ Require explicit upgrade for plain-package $package"
      elif git_check_up_to_date "$SHSH_PACKAGES_PATH/$package"; then
        update_and_refresh_screen "$package" "≡ Already up-to-date with $package"
      else
        update_and_refresh_screen "$package" "↯ Updating $package..."
        if shsh-upgrade "$package" >/dev/null 2>&1; then
          msg="✓ Updated $package"
        else
          msg="✘ Failed to update $package, with exit code $?"
        fi
        update_and_refresh_screen "$package" "$msg"
      fi
    ) 5>>"$lockfile" &
  done
  wait

  restore_line_wrapping
  rm -f "$lockfile"
  rm -f "$msgfile"
  exit
fi

if [ "$#" -ne 1 ]; then
  shsh-help upgrade
  exit 1
fi

# TAG completions
if [ "$1" = "--complete" ]; then
  exec shsh-list
fi

package="$1"

parse_install_folder "$package"
package_exists "$_folder_full" || exit 1
target_folder="${SHSH_PACKAGES_PATH}/$_folder_full"

if [ -d "${SHSH_PACKAGES_PATH}/$_folder_full/".git ]; then
  # git package
  if [ -z "$force_upgrade" ] && git_check_up_to_date "${SHSH_PACKAGES_PATH}/$_folder_full"; then
    exit
  fi
elif [ -e "${target_folder:?}/.gh-release_info" ]; then
  # gh release
  if [ -z "$force_upgrade" ] && gh_release_check_up_to_date "$_folder_full" "$target_folder"; then
    exit
  fi
  gh_release="true"
else
  # plain package
  :
fi
if [ -z "$nohooks" ]; then
  shshrc_get_existing_install_cmd "$_folder_full"
  eval "parse_hooks_and_setvar $existing"
fi

# unlink everything first
shsh-_unlink-man "$_folder_full"
shsh-_unlink-bins "$_folder_full"
shsh-_unlink-completions "$_folder_full"


cd "${SHSH_PACKAGES_PATH}/$_folder_full"
# upgrade the package
if [ -d "$target_folder/".git ]; then
  # cleanup any modified files
  git clean -xdf
  git checkout .
  # use git to pull
  git pull
else
  # plain package or gh release
  # remove the folder and rerun hook in a plain folder
  # shellcheck disable=SC2011
  for f in ./*; do
    case $f in
      .gh-release_info) : ;; # skip
      *) rm -rf "$f";;
    esac
done
fi

if [ -n "$gh_release" ]; then
  # we will source the script to inherit the 'potential' exported variables
  # shellcheck source=libexec/shsh-_post-gh-release

  export package="$_folder_full"
  export target_folder="$target_folder"
  export ref="$ref"
  # shellcheck source=libexec/shsh-_post-gh-release
  . shsh-_post-gh-release
fi
shsh-_post-install "$_folder_full" "$target_folder"

# upgrade any dependencies it needs
for dep in $(shsh-_deps --get "$_folder_full")
do
  shsh-upgrade "$dep"
done
