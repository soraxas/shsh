#!/usr/bin/env sh

set -e

# shellcheck source=libexec/shsh-_utils
. "${UTILS_FUNC:?}"

# these variables are set by the caller
package="${package:?}"
target_folder="${target_folder:?}"
ref="${ref:-}"  # optional

echo_if_verbose ">> Requesting github release info"
_response="$(request_gh_release_info "$package" "$ref")"

if [ "$(jq -r -n --argjson data "$_response" '$data.message')" = "Not Found" ]; then
  error_echo "> The given github repo '$package' was not found"
  exit 1
fi

echo_if_verbose ">> Saving release tag to file"
jq -n --argjson data "$_response" '$data' > "$target_folder/.gh-release_info"

# using EOF method as the original json might contain invalid characters
echo_if_verbose ">> Parsing json result"
all_available_assets="$(jq -n --argjson data "$_response" '$data.assets')"
available_assets="$all_available_assets"

ignored_file() {
  # This function will ignore the .gh-release_info file and the release asset's archive
  # a gh-release will always have contains 2 entries:
  # - the .gh-release_info file
  # - the release asset's archive
  archive="$1"
  while IFS= read -r line; do
    case "$line" in
      */.gh-release_info) ;;
      */"$archive") ;;
      *)
        echo "$line"
        ;;
    esac
  done
}

detect_os() {
  os=$(uname -s 2>/dev/null | tr '[:upper:]' '[:lower:]')
  case "$os" in
    linux) os="linux" ;;
    darwin) os="macos" ;;
    freebsd) os="freebsd" ;;
    cygwin* | mingw* | msys*) os="windows" ;;
    *) os="unknown" ;;
  esac
  echo "$os"
}

detect_arch() {
  arch=$(uname -m 2>/dev/null)
  case "$arch" in
    x86_64 | amd64) arch="amd64" ;;
    aarch64 | arm64) arch="arm64" ;;
    armv7l | armv7) arch="armv7" ;;
    i386 | i686) arch="386" ;;
    *) arch="unknown" ;;
  esac
  echo "$arch"
}

#########################################
# auto-determine the target asset name
#########################################

os_variant() {
  os="$1"
  case "$os" in
    macos) echo "darwin" "mac" "macos" "apple" ;;
    linux) echo "linux" "gnu" ;;
    windows) echo "windows" "win" ;;
    *) echo "unknown" ;;
  esac
}

arch_variant() {
  arch="$1"
  case "$arch" in
    x86_64 | amd64) echo "x86_64" "amd64" "64" ;;
    aarch64 | arm64) echo "aarch64" "arm64" "64" ;;
  esac
}

auto_determine_assets() {
  available_assets="$1"
  os="$(detect_os)"
  arch="$(detect_arch)"

  echo_if_verbose ">> system info: $os $arch"

  # First try exact matches for os-arch combinations
  for os_variant in $(os_variant "$os"); do
    for arch_variant in $(arch_variant "$arch"); do
      item="$(echo "$available_assets" | jq -r '.[] | select(.name|test("'"$os_variant"'.*'"$arch_variant"'|'"$arch_variant"'.*'"$os_variant"'"))')"
      if [ -n "$item" ]; then
        echo "$item"
        return
      fi
    done
  done

  # Try matching just the OS
  item="$(echo "$available_assets" | jq -r '.[] | select(.name|test("'"$os"'"))')"
  if [ -n "$item" ]; then
    echo "$item"
    return
  fi

  # Try matching just the architecture
  item="$(echo "$available_assets" | jq -r '.[] | select(.name|test("'"$arch"'"))')"
  if [ -n "$item" ]; then
    echo "$item"
    return
  fi

  # Fallback to common architecture names if no match found
  for pref in $gh_release_asset x86_64 x86-64 amd64 linux64 x64; do
    item="$(echo "$available_assets" | jq -r '.[] | select(.name|test("'"$pref"'"))')"
    if [ -n "$item" ]; then
      echo "$item"
      return
    fi
  done
}

filter_by_preference() {
  # Filter out available options. If there are no more
  # canidates left after the filtering, revert back to
  # the original list
  # $1 jq array
  # $2 jq filter
  available_assets="$1"
  canidates="$( echo "$available_assets" | jq -r "$2" )"
  if [ -n "$(echo "$canidates" | jq 'select(length > 0)' )" ]; then
    # only replace when there are canidates left
    available_assets="$canidates"
  fi
  # e.g. available_assets='[{"name":"file-linux-musl-x86_64.tgz"},{"name":"file-linux-x86_64.tar.gz"},{"name":"file-linux-gnu-x86_64.zip"}]'
  echo "$available_assets"
  echo_if_verbose ">> filtering with '$2'"
  echo_if_verbose ">>>> from '$(echo "$1" | jq -r '.[].name' | tr '\n' ' ')' to '$(echo "$available_assets" | jq -r '.[].name' | tr '\n' ' ')'"
}

# necessary condition
available_assets="$(auto_determine_assets "$available_assets")"
available_assets="$(echo "$available_assets" | jq -s '.' )"

# check results
if [ -z "$(echo "$available_assets" | jq 'select(length > 0)' )" ]; then
  printf "%s\n%s\n" ">> Unable to find suitable release asset. Available release assets are:" "$( echo "$all_available_assets" | jq -r '.[].name' )"
  exit 1
fi


# Function to apply multiple filters in order of preference
apply_preferences() {
  available_assets="$1"
  shift # Remove the first argument (available_assets)

  # Loop through each filter
  while [ $# -gt 0 ]; do
    pattern="$1"
    available_assets=$(filter_by_preference "$available_assets" "map(select(.name|test(\"$pattern\")))")
    shift # Move to the next filter
  done

  echo "$available_assets"
}
##############################
# preferred condition
# archives
# prefer statically linked assets

# Define your preferences in the order you want them to be applied
os="$(detect_os)"
arch="$(detect_arch)"

case "$os" in
  macos)
    preference_filters_patterns='
      (.tgz)|(.tar.gz)|(.zip)|(.xz)$
      (darwin)|(mac)|(macos)
      '"$arch"'
    '
    ;;
  linux)
    preference_filters_patterns='
      (.tgz)|(.tar.gz)|(.zip)|(.xz)$
      (.tar.zst)$
      (linux-musl)|(musl)
      (linux)|(Linux)
      '"$arch"'
      gnu
    '
    ;;
  windows)
    preference_filters_patterns='
      (.zip)|(.exe)$
      (windows)|(win)
      '"$arch"'
    '
    ;;
  *)
    preference_filters_patterns='
      (.tgz)|(.tar.gz)|(.zip)|(.xz)$
      '"$os"'
      '"$arch"'
    '
    ;;
esac

# Apply the preferences
# shellcheck disable=SC2086 # Intended splitting of pattern
available_assets="$(apply_preferences "$available_assets" $preference_filters_patterns)"

# get first item
item="$(echo "$available_assets" | jq -r '.[0]')"

gh_release_asset="$(echo "$item" | jq -r '.name' | head -1)"

case "$gh_release_asset" in
  *.gz|*.xz|*.tgz)
    unarchive_cmd="tar xvf"
    ;;
  *.tar.zst)
    unarchive_cmd="tar --zstd -xvf"
    ;;
  *.zip)
    unarchive_cmd="unzip"
    ;;
  *)
    # non-archive
    unarchive_cmd="echo"
    ;;
esac
info_echo ">> Going to download release asset '$gh_release_asset'"

# We don't want the nested variables to expand
# shellcheck disable=SC2016
_script='download '"$(echo "$item" | jq -r '.browser_download_url' | head -1)"' && '$unarchive_cmd' "$gh_release_asset"'
execute_hooks "downloading gh-release" "$target_folder" "$_script"


# detect if the target folder contains exactly one entry and that entry is a directory
entry_paths=$(find "$target_folder" -mindepth 1 -maxdepth 1 | ignored_file "$gh_release_asset")
count=$(printf '%s\n' "$entry_paths" | wc -l)
if [ "$count" -eq 1 ] && [ -d "$entry_paths" ]; then
  # only auto-set the root if the single directory isn't bin, completions, or man
  dir_name=$(basename "$entry_paths")
  case "$dir_name" in
    bin|completions|man)
      ;;
    *)
      info_echo ">> Auto-setting root directory to '$dir_name'"
      export ROOT="$dir_name"
      ;;
  esac
fi
