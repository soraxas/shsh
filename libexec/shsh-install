#!/usr/bin/env sh
#, respectively.
# Summary: Installs a package from github, custom site, or any arbitrary recipes.
#
# Usage: shsh install [site]/<package>[@ref] [<folder>/<folder>]
#                     [-h|--hook <hook>] [-v|--variable <VAR>=<VAL>] [--ssh]
#                     [--nocleanup] [-f|--force]
#   or:  shsh install --plain <folder>/<folder>
#                     [-h|--hook <hook>] [-v|--variable <VAR>=<VAL>]
#                     [--nocleanup] [-f|--force]
#
# Options:
#       -h, --hook <HOOK_TYPE>[=<CONTENT>]
#                    add HOOK to this package, which is triggered while
#                    installing or upgrading a package
#       -v --variable <VAR>=<VAL>
#                    set a variable VAR with value VAL,
#                    useful for setting up files for linking
#       --nocleanup  do not perform cleanup (shsh uninstall <package>)
#                    even if something failed in the installination process
#       --plain      do not clone from a git repository; useful to use hooks
#                    script to build a package from the ground up
#       --gh-release download binary assets from a github release; this
#                    flag implies --plain
#                    TODO: currently it is bias towards linux and amd64;
#                          to-be generalised towards detecting current arch.
#       --arch[pkg] install the <package> as Arch package (or AUR)
#       -f, --force  force the installation even if the package exists
#       --ssh        use ssh protocal instead of https
#
#       --verbose    display more info for some commands
#
# Hook types:
#   pre=<SCRIPT>     Any arbitrary POSIX script that runs before linking.
#   post=<SCRIPT>    Any arbitrary POSIX script that runs after linking.
#   uninstall=<...>  Any arbitrary POSIX script that runs before uninstalling.
#                    For the above hooks, if multiples are given, the older
#                    one will be overriden.
#   +x=<FILE>        Before linking, adds executable bit to the FILE. If
#                    multiples are given, they will be run in sequential order.
#   a+x              Before linking, add executable bit to all files.
#
# Examples:
#   shsh install soraxas/dot-reminder
#                    install 'soraxas/dot-reminder' as a package
#   shsh install soraxas/git-utils git/tools
#                    install 'soraxas/git-utils' to a folder within 'git/tools'
#   shsh install --ssh <package>
#                    install with ssh protocal (rather than https)
#   shsh install <package> -v FISH_COMPLETIONS=synoservice.fish:forgit.fish
#                    link 'synoservice.fish' and 'forgit.fish' as fish
#                    completion files
#   shsh install <package> --hook pre="mv bin/foo bin/bar"
#                    Execute the script "mv bin/foo bin/bar" before `shsh`
#                    performs linking (e.g. this script renames the binary)
#   shsh install <package> --hook +x=foobar
#                    add a hook that add executable bits to the file 'foobar',
#                    before linking is performed
#   shsh install <package> -h pre='make all' -h post='rm -r build/*'
#                    add a hook that runs 'make all' to build binaries, right
#                    after cloning and before linking is performed. Then,
#                    linking is performed with its usual rules (i.e. all
#                    executable files in root and in bin/). Finally,
#                    'rm -r build/*' is ran to remove leftovers.
#   shsh install --plain wsl-tools/win32yank -h pre='curl -sLo out.zip \
#                https://<..>/releases/<..>.zip && unzip out.zip' -h +x=win32yank.exe
#                    add a plain package by using curl to download pre-built
#                    binary from upstream release page.


set -e
# shellcheck source=libexec/shsh-_utils
. "${UTILS_FUNC:?}"

original_args="$(requote_args "$@")"

parse_hooks_and_setvar "$@"
# set back $@ from leftovers
# shellcheck disable=SC2086
set -- $SHSH_ARGV

use_ssh="false"
# shellcheck disable=SC2116
EOL=$(echo '\00\07\01\00')
if [ "$#" != 0 ]; then
  set -- "$@" "$EOL"
  while [ "$1" != "$EOL" ]; do
    opt="$1"; shift
    case "$opt" in
      --ssh)
        use_ssh="true"
        ;;
      --arch|--archpkg)
        archpkg="true"
        ;;
      --nocleanup)
        no_cleanup="true"
        export no_cleanup
        ;;
      --noconfirm)
        SHSH_ARCHPKG_NOCONFIRM="true"
        export SHSH_ARCHPKG_NOCONFIRM
        ;;
      -f|--force)
        force_install="true"
        ;;
      --gh-release|--gh-release=*)
        gh_release="true"
        plain_package="true"
        case "$gh_release_asset" in
          *=*)
            gh_release_asset="${opt#*=}"
            export gh_release_asset
          ;;
        esac
        ;;
      --plain)
        # set a dummy remote package name
        # set -- "PLACE/HOLDER" "$@"
        plain_package="true"
        ;;
      --*=*)  # convert '--name=arg' to '--name' 'arg'
        set -- "${opt%%=*}" "${opt#*=}" "$@";;
      -[!-]?*)  # convert '-abc' to '-a' '-b' '-c'
        # shellcheck disable=SC2046  # we want word splitting
        set -- $(echo "${opt#-}" | sed 's/\(.\)/ -\1/g') "$@";;
      --)  # process remaining arguments as positional
        while [ "$1" != "$EOL" ]; do set -- "$@" "$1"; shift; done;;
      -*)
        echo "Error: Unsupported flag '$opt'" >&2
        exit 1
        ;;
      *)
        # set back any unused args
        set -- "$@" "$opt"
    esac
  done
  shift # remove the EOL token
fi


if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
  shsh-help install
  exit 1
fi

############################################################

if [ -n "$2" ] && [ -n "$archpkg" ]; then
  error_echo "> Arch/AUR package cannot use custom folder name."
  exit 1
fi

# custom folder name
parse_install_folder "$2" "$operation" && package="$_folder_full"


##########################################
if [ -n "$plain_package" ]; then
  operation="plain"
elif [ -n "$archpkg" ]; then
  operation="archpkg"
else
  operation="gitclone"
fi

case "$operation" in
  #########
  plain|archpkg)
    if [ -z "$package" ]; then
      # extract ref if it exists
      ref=""
      case "$1" in
      */*@*)
        IFS=@ read -r _clean_input_1 ref <<EOF
$1
EOF
        ;;
      *)
        _clean_input_1="$1"
        ;;
      esac
      ####
      if parse_install_folder "$_clean_input_1" "$operation"; then
        package="$_folder_full"
      else
        error_echo "Cannot parse folder from argunment."
        exit 1
      fi
    fi
    ;;
  #########
  gitclone)
    case "${1%%@*}" in
    */*/*)
      IFS=/ read -r site user name <<EOF
$1
EOF
      ;;
    */*)
      IFS=/ read -r user name <<EOF
$1
EOF
      site="github.com"
      ;;
    *)
      shsh-help install
      exit 1
      ;;
    esac
    gitrepo="${user}/${name}"

    # defaults to package's name
    [ -z "$package" ] && package="${gitrepo%%@*}"

    # extract ref if it exists
    ref=""
    case "$gitrepo" in
    */*@*)
      IFS=@ read -r gitrepo ref <<EOF
$gitrepo
EOF
    ;;
  esac
    ;;
  #########
  *)
    error_echo "> Unknown error in selecting operation for parsing: '$operation'"
    exit 1
    ;;
esac


## INSTALLING
# shellcheck disable=SC2015
[ -n "$force_install" ] && shsh uninstall "$package" >/dev/null 2>&1 || true

package_not_exists "$package" || exit 1


on_exit() {
  # shellcheck disable=SC2181
  [ $? -eq 0 ] && exit
  # non-zero exit status
  [ -n "$no_cleanup" ] && exit
  info_echo "> Error occured. Cleaning up..."
  export hook_uninstall
  shsh uninstall "$package"
}
trap on_exit EXIT

case "$operation" in
  plain)
  ########################################################
    # plain package or github-release
    mkdir -p "${SHSH_PACKAGES_PATH}/$package"
    ;;
  archpkg)
    mkdir -p "${SHSH_PACKAGES_PATH}/$package"
    shsh-_install-archpkg "$1" "$package"
    ;;
  gitclone)
    # only perform link if clone is successful (and package not exists before)
    if ! shsh-_clone "$use_ssh" "$site" "$gitrepo" "$ref" "$package"; then
      exit 1
    fi
    shsh-_deps "$package"
    ;;
  *)
    error_echo "> Unknown error in selecting operation: '$operation'"
    exit 1
    ;;
esac

shsh-_post-install "$package" "${SHSH_PACKAGES_PATH}/$package" "$gh_release" "$ref"


[ -z "$SHSHRC" ] && exit
## SHSHRC
# by default, create SHSHRC if not exists yet.
if [ ! -e "$SHSHRC" ]; then
  touch "$SHSHRC" || true
fi
# add successfully installed package to shshrc
if [ -e "$SHSHRC" ]; then
  set +e  # allow non-zero exit status in pattern matching
  if [ operation = "archpkg" ]; then
    _target_package="$1"
  else
    _target_package="$package"
  fi
  shshrc_get_existing_install_cmd "$_target_package"
  new_statement="shsh install $original_args"

  if [ -z "$existing" ]; then
    # append the file with new package
    info_echo "> Appending statement to \$SHSHRC: \"$new_statement\""
    echo "$new_statement" >> "$SHSHRC"

  # check if existings are the same (e.g. with same flags etc.)
  elif [ "$existing" != "shsh install $original_args" ]; then
    # update the file with new args/flags
    new_statement="${existing_prefix}${new_statement}${existing_suffix}"
    # 1st sed pattern: escape '&' (in awk gsub it has the meaning of matched string)
    # 2nd sed pattern: all backslash needs to be doubled in awk
    new_statement="$(echo "$new_statement" | \
      sed 's/&/\\&/g; s/\\/\\\\/g')"

    info_echo "> Updating existing statement in \$SHSHRC"
    info_echo ">>>> -was: \"$existing\""
    info_echo ">>>> +new: \"$new_statement\""
    awk '{gsub(old,new); print}' old="^[[:space:]]*shsh[[:space:]]+install[[:space:]](.*[[:space:]])?$_target_package([[:space:]].*)?$" \
      new="$new_statement" "$SHSHRC" > "${SHSHRC}.tmp" && mv "${SHSHRC}.tmp" "${SHSHRC}"
  fi
  set -e
fi
