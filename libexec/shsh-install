#!/usr/bin/env sh
#, respectively.
# Summary: Installs a package from github, custom site, or any arbitrary recipes.
#
# Usage: shsh install [site]/<package>[@ref] [<folder>/<folder>]
#                     [-h|--hook <hook>] [-v|--variable <VAR>=<VAL>] [--ssh]
#                     [--nocleanup] [-f|--force]
#   or:  shsh install --plain <folder>/<folder>
#                     [-h|--hook <hook>] [-v|--variable <VAR>=<VAL>]
#                     [--nocleanup] [-f|--force]
#
# Options:
#       -h, --hook <HOOK_TYPE>[=<CONTENT>]
#                    add HOOK to this package, which is triggered while
#                    installing or upgrading a package
#       -r, --recipe interpret the given package name as a hosted recipt at
#                    github.com/soraxas/shsh-recipes.
#       -v --variable <VAR>=<VAL>
#                    set a variable VAR with value VAL,
#                    useful for setting up files for linking
#       --nocleanup  do not perform cleanup (shsh uninstall <package>)
#                    even if something failed in the installination process
#       --plain      do not clone from a git repository; useful to use hooks
#                    script to build a package from the ground up
#       --gh-release download binary assets from a github release; this
#                    flag implies --plain
#                    TODO: currently it is bias towards linux and amd64;
#                          to-be generalised towards detecting current arch.
#       -f, --force  force the installation even if the package exists
#       --ssh        use ssh protocal instead of https
#
#       --verbose    display more info for some commands
#
# Hook types:
#   pre=<SCRIPT>     Any arbitrary POSIX script that runs before linking.
#   post=<SCRIPT>    Any arbitrary POSIX script that runs after linking.
#   uninstall=<...>  Any arbitrary POSIX script that runs before uninstalling.
#                    For the above hooks, if multiples are given, the older
#                    one will be overriden.
#   +x=<FILE>        Before linking, adds executable bit to the FILE. If
#                    multiples are given, they will be run in sequential order.
#   a+x              Before linking, add executable bit to all files.
#
# Examples:
#   shsh install soraxas/dot-reminder
#                    install 'soraxas/dot-reminder' as a package
#   shsh install soraxas/git-utils git/tools
#                    install 'soraxas/git-utils' to a folder within 'git/tools'
#   shsh install --ssh <package>
#                    install with ssh protocal (rather than https)
#   shsh install <package> -v FISH_COMPLETIONS=synoservice.fish:forgit.fish
#                    link 'synoservice.fish' and 'forgit.fish' as fish
#                    completion files
#   shsh install <package> --hook pre="mv bin/foo bin/bar"
#                    Execute the script "mv bin/foo bin/bar" before `shsh`
#                    performs linking (e.g. this script renames the binary)
#   shsh install <package> --hook +x=foobar
#                    add a hook that add executable bits to the file 'foobar',
#                    before linking is performed
#   shsh install <package> -h pre='make all' -h post='rm -r build/*'
#                    add a hook that runs 'make all' to build binaries, right
#                    after cloning and before linking is performed. Then,
#                    linking is performed with its usual rules (i.e. all
#                    executable files in root and in bin/). Finally,
#                    'rm -r build/*' is ran to remove leftovers.
#   shsh install --plain wsl-tools/win32yank -h pre='curl -sLo out.zip \
#                https://<..>/releases/<..>.zip && unzip out.zip' -h +x=win32yank.exe
#                    add a plain package by using curl to download pre-built
#                    binary from upstream release page.


set -e
# shellcheck source=libexec/shsh-_utils
. "${UTILS_FUNC:?}"

original_args="$(requote_args "$@")"

parse_shsh_install_cmd "$@" || exit "$?"
# set back $@ from leftovers
# shellcheck disable=SC2086
set -- $SHSH_ARGV

if [ -n "$as_recipe" ]; then
  # get status code and content at the same time.
  # content="$( 2>/tmp/)"
  contentfile="$(mktemp)"
  # we first output http_code to stderr (and actual content to stdout)
  # Then, the 3>&2 2>&1 1>&3 swap stdout and stderr, and we redirect http status to a file.
  http_status="$({
    curl -Lsk -w '%{stderr}%{http_code}\n%{stdout}\n' https://raw.githubusercontent.com/soraxas/shsh-recipes/main/pkgs/"${package}"/latest >"$contentfile"
   } 2>&1 )"

  if [ "$http_status" = "404" ]; then
    error_echo "> Package recipe for '$package' does not exists"
    exit 1
  fi
  if [ "$http_status" != "200" ]; then
    error_echo "> Error occurs when retrieving '$package' recipe"
    exit 1
  fi

  ####### run a nested instance of `shsh` as specified by the recipe
  # get current shell that is running this instance of `shsh``
  current_shell="$(ps -p $$ -o 'comm=')"
  # fallback if none is set (if for some reason)
  [ -n "$current_shell" ] || current_shell="sh"

  on_exit() {
    status=$?
    rm -rf "$contentfile"
    # shellcheck disable=SC2181
    [ "$status" -eq 0 ] && exit
    # non-zero exit status
    info_echo "> Error occured when executing recipe."
  }
  trap on_exit EXIT

  SHSHRC="" "$current_shell" "$contentfile"

# ^ recipe
#############################################
else
#############################################

  ## INSTALLING
  # shellcheck disable=SC2015
  [ -n "$force_install" ] && shsh uninstall "$package" >/dev/null 2>&1 || true

  package_not_exists "$package" || exit 1


  on_exit() {
    # shellcheck disable=SC2181
    [ $? -eq 0 ] && exit
    # non-zero exit status
    [ -n "$no_cleanup" ] && exit
    info_echo "> Error occured. Cleaning up..."
    export hook_uninstall
    shsh uninstall "$package"
  }
  trap on_exit EXIT

  case "$operation" in
    plain)
    ########################################################
      # plain package or github-release
      mkdir -p "${SHSH_PACKAGES_PATH}/$package"
      ;;
    gitclone)
      # only perform link if clone is successful (and package not exists before)
      if ! shsh-_clone "$use_ssh" "$site" "$gitrepo" "$ref" "$package"; then
        exit 1
      fi
      shsh-_deps "$package"
      ;;
    *)
      error_echo "> Unknown error in selecting operation: '$operation'"
      exit 1
      ;;
  esac

  if [ -n "$gh_release" ]; then
    shsh-_post-gh-release "$package" "${SHSH_PACKAGES_PATH}/$package" "$ref"
  fi
  shsh-_post-install "$package" "${SHSH_PACKAGES_PATH}/$package"

fi

[ -z "$SHSHRC" ] && exit
## SHSHRC
# by default, create SHSHRC if not exists yet.
if [ ! -e "$SHSHRC" ]; then
  touch "$SHSHRC" || true
fi
# add successfully installed package to shshrc
if [ -e "$SHSHRC" ]; then
  set +e  # allow non-zero exit status in pattern matching
  _target_package="$package"
  shshrc_get_existing_install_cmd "$_target_package"
  new_statement="shsh install $original_args"

  if [ -z "$existing" ]; then
    # append the file with new package
    info_echo "> Appending statement to \$SHSHRC: \"$new_statement\""
    echo "$new_statement" >> "$SHSHRC"

  # check if existings are the same (e.g. with same flags etc.)
  elif [ "$existing" != "shsh install $original_args" ]; then
    # update the file with new args/flags
    new_statement="${existing_prefix}${new_statement}${existing_suffix}"
    # 1st sed pattern: escape '&' (in awk gsub it has the meaning of matched string)
    # 2nd sed pattern: all backslash needs to be doubled in awk
    new_statement="$(echo "$new_statement" | \
      sed 's/&/\\&/g; s/\\/\\\\/g')"

    info_echo "> Updating existing statement in \$SHSHRC"
    info_echo ">>>> -was: \"$existing\""
    info_echo ">>>> +new: \"$new_statement\""
    awk '{gsub(old,new); print}' old="^[[:space:]]*shsh[[:space:]]+install[[:space:]](.*[[:space:]])?$_target_package([[:space:]].*)?$" \
      new="$new_statement" "$SHSHRC" > "${SHSHRC}.tmp" && mv "${SHSHRC}.tmp" "${SHSHRC}"
  fi
  set -e
fi
